红黑树（Red–black tree）
二叉搜索树/二叉查找树/二叉排序树 + 额外要求：
1.节点是红色或黑色
2.根是黑色
3.所有叶子都是黑色[注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]
4.每个红色节点必须有两个黑色的子节点
5.从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点

AVL和RBT均是二叉搜索树的优化：
1.结构对比：AVL的结构高度平衡，RBT的结构基本平衡。平衡度：AVL > RBT。
2.查找对比：AVL查找时间复杂度最好、最坏情况都是O(logN)。RBT查找时间复杂度最好为O(logN)，最坏情况下比AVL略差。
3.插入删除对比：
·AVL的插入和删除结点很容易造成树结构的不平衡，而RBT的平衡度要求较低。因此在大量数据插入的情况下，RBT需要通过旋转变色操作来重新达到平衡的频度要小于AVL。
·如果需要平衡处理时，RBT比AVL多一种变色操作，而且变色的时间复杂度在O(logN)数量级上。但是由于操作简单，所以在实践中这种变色仍然是非常快速的。
·当插入一个结点都引起了树的不平衡，AVL和RBT都最多需要2次旋转操作。但删除一个结点引起不平衡后，AVL最多需要logN 次旋转操作，而RBT最多只需要3次。因此两者插入一个结点的代价差不多，但删除一个结点的代价RBT要低一些。
·AVL和RBT的插入删除代价主要还是消耗在查找待操作的结点上。因此时间复杂度基本上都是与O(logN) 成正比的。
总体评价：大量数据实践证明，RBT的总体统计性能要好于平衡二叉树。

AVL树：windows对进程地址空间的管理用到了AVL树
红黑树：平衡二叉树，广泛用在C++的STL中。map和set都是用红黑树实现的。
B/B+树：用在磁盘文件组织 数据索引和数据库索引。
Trie树：字典树，用在统计和排序大量字符串，搜索引擎下拉框。

参考链接：https://blog.csdn.net/guoweimelon/article/details/50904307
