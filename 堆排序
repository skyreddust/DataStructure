堆排序（Heap sort）：堆是一个完全二叉树的结构，即子结点的键值或索引总是小于（或者大于）它的父节点。

基本思想：从最大（小）堆得顶部不断取走堆顶元素放到有序序列中，直到堆的元素被全部取完。
堆排序完全依赖于最大（小）堆的相关操作。

运行过程：
1.创建一个最大（小）堆H；
2.把堆首和堆尾元素互换；
3.把堆的大小减1，重新构造一个最大（小）堆；
4.重复步骤2、3，直到堆的大小减少为1。

#include <iostream>
#include <algorithm>
using namespace std;
 
void max_heapify(int arr[], int start, int end) {
	//建立父節點指標和子節點指標
	int dad = start;
	int son = dad * 2 + 1;
	while (son < end) { //若子節點指標在範圍內才做比較
		if (son + 1 < end && arr[son] < arr[son + 1]) //先比較兩個子節點大小，選擇最大的
			son++;
		if (arr[dad] > arr[son]) //如果父節點大於子節點代表調整完畢，直接跳出函數
			return;
		else { //否則交換父子內容再繼續子節點和孫節點比較
			swap(arr[dad], arr[son]);
			dad = son;
			son = dad * 2 + 1;
		}
	}
}
 
void heap_sort(int arr[], int len) {
	//初始化，i從最後一個父節點開始調整
	for (int i = len / 2 - 1; i >= 0; i--)
		max_heapify(arr, i, len);
	//先將第一個元素和已排好元素前一位做交換，再從新調整，直到排序完畢
	for (int i = len - 1; i > 0; i--) {
		swap(arr[0], arr[i]);
		max_heapify(arr, 0, i);
	}
}
 
int main() {
	int arr[] = { 4, 1, 3, 2, 16, 9, 10, 14, 8, 7};
	int len = (int) sizeof(arr) / sizeof(*arr);
	heap_sort(arr, len);
	for (int i = 0; i < len; i++)
		cout << arr[i] << ' ';
	cout << endl;
	return 0;
}

时间复杂度为O(nlogn)；空间复杂度为O(1)；是不稳定的排序算法。

参考链接：https://blog.csdn.net/guoweimelon/article/details/50904231
